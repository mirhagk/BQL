// -----------------------------------------------------------------------
// <auto-generated>
//   This code was generated by Pegasus 3.1.0.0
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
// </auto-generated>
// -----------------------------------------------------------------------

namespace
#line 1 "Grammar.peg"
           BQLPEG
#line default
{
    using System;
    using System.Collections.Generic;
    using Pegasus.Common;
    using
        #line 2 "Grammar.peg"
       BQLPEG.Nodes
        #line default
        ;
    using
        #line 3 "Grammar.peg"
       System.Linq
        #line default
        ;

    /// <summary>
    ///  Parses a string according to the rules of the <see cref="Grammar" /> grammar.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Pegasus", "3.1.0.0")]
    public
    partial class
    #line 4 "Grammar.peg"
           Grammar
    #line default
    {
        private Dictionary<string, object> storage;

        /// <summary>
        ///  Parses a string according to the rules of the <see cref="Grammar" /> grammar.
        /// </summary>
        /// <param name="subject">The parsing subject.</param>
        /// <param name="fileName">The optional file name to use in error messages.</param>
        /// <returns>The <see cref="IEnumerable&lt;StatementNode&gt;" /> parsed from <paramref name="subject" />.</returns>
        /// <exception cref="FormatException">
        ///  Thrown when parsing fails against <paramref name="subject"/>.  The exception's <code>Data["cursor"]</code> will be set with the cursor where the fatal error occurred.
        /// </exception>
        public IEnumerable<StatementNode> Parse(string subject, string fileName = null)
        {
            try
            {
                this.storage = new Dictionary<string, object>();
                var cursor = new Cursor(subject, 0, fileName);
                var result = this.Root(ref cursor);
                if (result == null)
                {
                    throw ExceptionHelper(cursor, state => "Failed to parse 'Root'.");
                }
                return result.Value;
            }
            finally
            {
                this.storage = null;
            }
        }

        private IParseResult<IEnumerable<StatementNode>> Root(ref Cursor cursor)
        {
            IParseResult<IEnumerable<StatementNode>> r0 = null;
            r0 = this.stmtList(ref cursor);
            return r0;
        }

        private IParseResult<
            #line 6 "Grammar.peg"
          StatementNode
            #line default
            > stmtLine(ref Cursor cursor)
        {
            IParseResult<StatementNode> r0 = null;
            var startCursor0 = cursor;
            IParseResult<StatementNode> r1 = null;
            var stmtStart = cursor;
            r1 = this.stmt(ref cursor);
            var stmtEnd = cursor;
            var stmt = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<string>();
                while (l0.Count < 1)
                {
                    IParseResult<string> r3 = null;
                    r3 = this.ParseLiteral(ref cursor, ";");
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<StatementNode>(startCursor0, ref cursor, state =>
                        #line 6 "Grammar.peg"
                                           stmt
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 7 "Grammar.peg"
          IEnumerable<StatementNode>
            #line default
            > stmtList(ref Cursor cursor)
        {
            IParseResult<IEnumerable<StatementNode>> r0 = null;
            var startCursor0 = cursor;
            var l0 = new List<StatementNode>();
            while (true)
            {
                IParseResult<StatementNode> r1 = null;
                r1 = this.stmtLine(ref cursor);
                if (r1 != null)
                {
                    l0.Add(r1.Value);
                }
                else
                {
                    break;
                }
            }
            if (l0.Count >= 1)
            {
                r0 = this.ReturnHelper<IList<StatementNode>>(startCursor0, ref cursor, state => l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 8 "Grammar.peg"
    string
            #line default
            > Id(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            var idStart = cursor;
            var startCursor1 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                var startCursor2 = cursor;
                if (l0.Count > 0)
                {
                    IParseResult<string> r2 = null;
                    r2 = this.dot(ref cursor);
                    if (r2 == null)
                    {
                        break;
                    }
                }
                IParseResult<string> r3 = null;
                r3 = this.Id_simple(ref cursor);
                if (r3 != null)
                {
                    l0.Add(r3.Value);
                }
                else
                {
                    cursor = startCursor2;
                    break;
                }
            }
            if (l0.Count >= 1)
            {
                r1 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor1;
            }
            var idEnd = cursor;
            var id = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                    #line 8 "Grammar.peg"
                                     string.Concat(id)
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 9 "Grammar.peg"
      StatementNode
            #line default
            > stmt(ref Cursor cursor)
        {
            IParseResult<StatementNode> r0 = null;
            if (r0 == null)
            {
                r0 = this.createTableStmt(ref cursor);
            }
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.ParseLiteral(ref cursor, "GO");
                if (r1 != null)
                {
                    r0 = this.ReturnHelper<StatementNode>(startCursor0, ref cursor, state =>
                        #line 9 "Grammar.peg"
                                                new GoStatementNode()
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                r0 = this.selectStmt(ref cursor);
            }
            return r0;
        }

        private IParseResult<
            #line 10 "Grammar.peg"
                 CreateTableNode
            #line default
            > createTableStmt(ref Cursor cursor)
        {
            IParseResult<CreateTableNode> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.CREATE(ref cursor);
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.ows(ref cursor);
                if (r2 != null)
                {
                    IParseResult<string> r3 = null;
                    r3 = this.TABLE(ref cursor);
                    if (r3 != null)
                    {
                        IParseResult<IList<string>> r4 = null;
                        r4 = this.ows(ref cursor);
                        if (r4 != null)
                        {
                            IParseResult<string> r5 = null;
                            var idStart = cursor;
                            r5 = this.Id(ref cursor);
                            var idEnd = cursor;
                            var id = ValueOrDefault(r5);
                            if (r5 != null)
                            {
                                IParseResult<IList<string>> r6 = null;
                                r6 = this.ows(ref cursor);
                                if (r6 != null)
                                {
                                    IParseResult<string> r7 = null;
                                    r7 = this.ParseLiteral(ref cursor, "(");
                                    if (r7 != null)
                                    {
                                        IParseResult<IList<string>> r8 = null;
                                        r8 = this.ows(ref cursor);
                                        if (r8 != null)
                                        {
                                            IParseResult<IList<ITableDefNode>> r9 = null;
                                            var fieldsStart = cursor;
                                            r9 = this.tableDefList(ref cursor);
                                            var fieldsEnd = cursor;
                                            var fields = ValueOrDefault(r9);
                                            if (r9 != null)
                                            {
                                                IParseResult<IList<string>> r10 = null;
                                                r10 = this.ows(ref cursor);
                                                if (r10 != null)
                                                {
                                                    IParseResult<string> r11 = null;
                                                    r11 = this.ParseLiteral(ref cursor, ")");
                                                    if (r11 != null)
                                                    {
                                                        r0 = this.ReturnHelper<CreateTableNode>(startCursor0, ref cursor, state =>
                                                            #line 10 "Grammar.peg"
                                                                                                        new CreateTableNode{Name=id, Fields=fields.Where(f=>f is FieldNode).Cast<FieldNode>(), Constraints=fields.Where(f=>f is ConstraintNode).Cast<ConstraintNode>()}
                                                            #line default
                                                            );
                                                    }
                                                    else
                                                    {
                                                        cursor = startCursor0;
                                                    }
                                                }
                                                else
                                                {
                                                    cursor = startCursor0;
                                                }
                                            }
                                            else
                                            {
                                                cursor = startCursor0;
                                            }
                                        }
                                        else
                                        {
                                            cursor = startCursor0;
                                        }
                                    }
                                    else
                                    {
                                        cursor = startCursor0;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<IList<ITableDefNode>> tableDefList(ref Cursor cursor)
        {
            IParseResult<IList<ITableDefNode>> r0 = null;
            var startCursor0 = cursor;
            var l0 = new List<ITableDefNode>();
            while (true)
            {
                var startCursor1 = cursor;
                if (l0.Count > 0)
                {
                    IParseResult<string> r1 = null;
                    var startCursor2 = cursor;
                    IParseResult<IList<string>> r2 = null;
                    r2 = this.ows(ref cursor);
                    if (r2 != null)
                    {
                        IParseResult<string> r3 = null;
                        r3 = this.comma(ref cursor);
                        if (r3 != null)
                        {
                            IParseResult<IList<string>> r4 = null;
                            r4 = this.ows(ref cursor);
                            if (r4 != null)
                            {
                                {
                                    var len = cursor.Location - startCursor2.Location;
                                    r1 = this.ReturnHelper<string>(startCursor2, ref cursor, state =>
                                        state.Subject.Substring(startCursor2.Location, len)
                                        );
                                }
                            }
                            else
                            {
                                cursor = startCursor2;
                            }
                        }
                        else
                        {
                            cursor = startCursor2;
                        }
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                    if (r1 == null)
                    {
                        break;
                    }
                }
                IParseResult<ITableDefNode> r5 = null;
                if (r5 == null)
                {
                    r5 = this.fieldDef(ref cursor);
                }
                if (r5 == null)
                {
                    r5 = this.constraintDef(ref cursor);
                }
                if (r5 != null)
                {
                    l0.Add(r5.Value);
                }
                else
                {
                    cursor = startCursor1;
                    break;
                }
            }
            if (l0.Count >= 1)
            {
                r0 = this.ReturnHelper<IList<ITableDefNode>>(startCursor0, ref cursor, state => l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 12 "Grammar.peg"
          FieldNode
            #line default
            > fieldDef(ref Cursor cursor)
        {
            IParseResult<FieldNode> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var idStart = cursor;
            r1 = this.Id(ref cursor);
            var idEnd = cursor;
            var id = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.ows(ref cursor);
                if (r2 != null)
                {
                    IParseResult<string> r3 = null;
                    var typeStart = cursor;
                    r3 = this.typeName(ref cursor);
                    var typeEnd = cursor;
                    var type = ValueOrDefault(r3);
                    if (r3 != null)
                    {
                        IParseResult<IList<string>> r4 = null;
                        r4 = this.ows(ref cursor);
                        if (r4 != null)
                        {
                            IParseResult<IList<IEnumerable<decimal>>> r5 = null;
                            var typeParamsStart = cursor;
                            var startCursor1 = cursor;
                            var l0 = new List<IEnumerable<decimal>>();
                            while (l0.Count < 1)
                            {
                                IParseResult<IEnumerable<decimal>> r6 = null;
                                r6 = this.typeParams(ref cursor);
                                if (r6 != null)
                                {
                                    l0.Add(r6.Value);
                                }
                                else
                                {
                                    break;
                                }
                            }
                            r5 = this.ReturnHelper<IList<IEnumerable<decimal>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                            var typeParamsEnd = cursor;
                            var typeParams = ValueOrDefault(r5);
                            if (r5 != null)
                            {
                                IParseResult<IList<string>> r7 = null;
                                r7 = this.ows(ref cursor);
                                if (r7 != null)
                                {
                                    IParseResult<bool> r8 = null;
                                    var nullvalStart = cursor;
                                    r8 = this.nullOpt(ref cursor);
                                    var nullvalEnd = cursor;
                                    var nullval = ValueOrDefault(r8);
                                    if (r8 != null)
                                    {
                                        r0 = this.ReturnHelper<FieldNode>(startCursor0, ref cursor, state =>
                                            #line 12 "Grammar.peg"
                                                                                               new FieldNode{Name=id, Type=type, TypeParams=typeParams.SingleOrDefault(), Nullable=nullval}
                                            #line default
                                            );
                                    }
                                    else
                                    {
                                        cursor = startCursor0;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> typeName(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "BIT");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "DATE");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "TIME");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "TIMESTAMP");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "DECIMAL");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "REAL");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "FLOAT");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "SMALLINT");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "INTEGER");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "INTERVAL");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "CHARACTER");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "DATETIME");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "INT");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "DOUBLE");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "CHAR");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "NCHAR");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "VARCHAR");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "NVARCHAR");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "IMAGE");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "TEXT");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "NTEXT");
            }
            return r0;
        }

        private IParseResult<
            #line 14 "Grammar.peg"
            IEnumerable<decimal>
            #line default
            > typeParams(ref Cursor cursor)
        {
            IParseResult<IEnumerable<decimal>> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.ParseLiteral(ref cursor, "(");
                if (r1 != null)
                {
                    IParseResult<IList<string>> r2 = null;
                    r2 = this.ows(ref cursor);
                    if (r2 != null)
                    {
                        IParseResult<decimal> r3 = null;
                        var numStart = cursor;
                        r3 = this.number(ref cursor);
                        var numEnd = cursor;
                        var num = ValueOrDefault(r3);
                        if (r3 != null)
                        {
                            IParseResult<IList<string>> r4 = null;
                            r4 = this.ows(ref cursor);
                            if (r4 != null)
                            {
                                IParseResult<string> r5 = null;
                                r5 = this.ParseLiteral(ref cursor, ")");
                                if (r5 != null)
                                {
                                    r0 = this.ReturnHelper<IEnumerable<decimal>>(startCursor0, ref cursor, state =>
                                        #line 14 "Grammar.peg"
                                                                 new decimal[]{num}
                                        #line default
                                        );
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<string> r6 = null;
                r6 = this.ParseLiteral(ref cursor, "(");
                if (r6 != null)
                {
                    IParseResult<IList<string>> r7 = null;
                    r7 = this.ows(ref cursor);
                    if (r7 != null)
                    {
                        IParseResult<decimal> r8 = null;
                        var num1Start = cursor;
                        r8 = this.number(ref cursor);
                        var num1End = cursor;
                        var num1 = ValueOrDefault(r8);
                        if (r8 != null)
                        {
                            IParseResult<IList<string>> r9 = null;
                            r9 = this.ows(ref cursor);
                            if (r9 != null)
                            {
                                IParseResult<string> r10 = null;
                                r10 = this.comma(ref cursor);
                                if (r10 != null)
                                {
                                    IParseResult<IList<string>> r11 = null;
                                    r11 = this.ows(ref cursor);
                                    if (r11 != null)
                                    {
                                        IParseResult<decimal> r12 = null;
                                        var num2Start = cursor;
                                        r12 = this.number(ref cursor);
                                        var num2End = cursor;
                                        var num2 = ValueOrDefault(r12);
                                        if (r12 != null)
                                        {
                                            IParseResult<string> r13 = null;
                                            r13 = this.ParseLiteral(ref cursor, ")");
                                            if (r13 != null)
                                            {
                                                r0 = this.ReturnHelper<IEnumerable<decimal>>(startCursor1, ref cursor, state =>
                                                    #line 14 "Grammar.peg"
                                                                                                                                         new decimal[]{num1,num2}
                                                    #line default
                                                    );
                                            }
                                            else
                                            {
                                                cursor = startCursor1;
                                            }
                                        }
                                        else
                                        {
                                            cursor = startCursor1;
                                        }
                                    }
                                    else
                                    {
                                        cursor = startCursor1;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor1;
                                }
                            }
                            else
                            {
                                cursor = startCursor1;
                            }
                        }
                        else
                        {
                            cursor = startCursor1;
                        }
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            return r0;
        }

        private IParseResult<
            #line 15 "Grammar.peg"
         bool
            #line default
            > nullOpt(ref Cursor cursor)
        {
            IParseResult<bool> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<bool>> r1 = null;
            var valStart = cursor;
            var startCursor1 = cursor;
            var l0 = new List<bool>();
            while (l0.Count < 1)
            {
                IParseResult<bool> r2 = null;
                if (r2 == null)
                {
                    var startCursor2 = cursor;
                    IParseResult<string> r3 = null;
                    r3 = this.NULL(ref cursor);
                    if (r3 != null)
                    {
                        r2 = this.ReturnHelper<bool>(startCursor2, ref cursor, state =>
                            #line 15 "Grammar.peg"
                                  true
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                }
                if (r2 == null)
                {
                    var startCursor3 = cursor;
                    IParseResult<string> r4 = null;
                    r4 = this.NOT(ref cursor);
                    if (r4 != null)
                    {
                        IParseResult<IList<string>> r5 = null;
                        r5 = this.ows(ref cursor);
                        if (r5 != null)
                        {
                            IParseResult<string> r6 = null;
                            r6 = this.NULL(ref cursor);
                            if (r6 != null)
                            {
                                r2 = this.ReturnHelper<bool>(startCursor3, ref cursor, state =>
                                    #line 15 "Grammar.peg"
                                                      false
                                    #line default
                                    );
                            }
                            else
                            {
                                cursor = startCursor3;
                            }
                        }
                        else
                        {
                            cursor = startCursor3;
                        }
                    }
                    else
                    {
                        cursor = startCursor3;
                    }
                }
                if (r2 != null)
                {
                    l0.Add(r2.Value);
                }
                else
                {
                    break;
                }
            }
            r1 = this.ReturnHelper<IList<bool>>(startCursor1, ref cursor, state => l0.AsReadOnly());
            var valEnd = cursor;
            var val = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper<bool>(startCursor0, ref cursor, state =>
                    #line 15 "Grammar.peg"
                                                                val.Any()?val.Single():true
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 16 "Grammar.peg"
               ConstraintNode
            #line default
            > constraintDef(ref Cursor cursor)
        {
            IParseResult<ConstraintNode> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.CONSTRAINT(ref cursor);
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                r2 = this.ws(ref cursor);
                if (r2 != null)
                {
                    IParseResult<string> r3 = null;
                    var idStart = cursor;
                    r3 = this.Id(ref cursor);
                    var idEnd = cursor;
                    var id = ValueOrDefault(r3);
                    if (r3 != null)
                    {
                        IParseResult<string> r4 = null;
                        r4 = this.ws(ref cursor);
                        if (r4 != null)
                        {
                            IParseResult<ConstraintTypeNode> r5 = null;
                            var constraintTypeStart = cursor;
                            r5 = this.constraintTypeOpt(ref cursor);
                            var constraintTypeEnd = cursor;
                            var constraintType = ValueOrDefault(r5);
                            if (r5 != null)
                            {
                                r0 = this.ReturnHelper<ConstraintNode>(startCursor0, ref cursor, state =>
                                    #line 16 "Grammar.peg"
                                                                                          new ConstraintNode{ Name=id, ConstraintType=constraintType}
                                    #line default
                                    );
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 17 "Grammar.peg"
                   ConstraintTypeNode
            #line default
            > constraintTypeOpt(ref Cursor cursor)
        {
            IParseResult<ConstraintTypeNode> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.PRIMARY(ref cursor);
                if (r1 != null)
                {
                    IParseResult<string> r2 = null;
                    r2 = this.KEY(ref cursor);
                    if (r2 != null)
                    {
                        IParseResult<IList<string>> r3 = null;
                        var idsStart = cursor;
                        r3 = this.idlistPar(ref cursor);
                        var idsEnd = cursor;
                        var ids = ValueOrDefault(r3);
                        if (r3 != null)
                        {
                            r0 = this.ReturnHelper<ConstraintTypeNode>(startCursor0, ref cursor, state =>
                                #line 17 "Grammar.peg"
                                                                    new PKConstraintTypeNode{Ids=ids}
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<string> r4 = null;
                r4 = this.UNIQUE(ref cursor);
                if (r4 != null)
                {
                    IParseResult<IList<string>> r5 = null;
                    r5 = this.ows(ref cursor);
                    if (r5 != null)
                    {
                        IParseResult<IList<string>> r6 = null;
                        var idsStart = cursor;
                        r6 = this.idlistPar(ref cursor);
                        var idsEnd = cursor;
                        var ids = ValueOrDefault(r6);
                        if (r6 != null)
                        {
                            r0 = this.ReturnHelper<ConstraintTypeNode>(startCursor1, ref cursor, state =>
                                #line 17 "Grammar.peg"
                                                                                                                                  new UKConstraintTypeNode{Ids=ids}
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor1;
                        }
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            if (r0 == null)
            {
                var startCursor2 = cursor;
                IParseResult<string> r7 = null;
                r7 = this.NOT(ref cursor);
                if (r7 != null)
                {
                    IParseResult<string> r8 = null;
                    r8 = this.NULL(ref cursor);
                    if (r8 != null)
                    {
                        IParseResult<IList<string>> r9 = null;
                        var idsStart = cursor;
                        r9 = this.idlistPar(ref cursor);
                        var idsEnd = cursor;
                        var ids = ValueOrDefault(r9);
                        if (r9 != null)
                        {
                            r0 = this.ReturnHelper<ConstraintTypeNode>(startCursor2, ref cursor, state =>
                                #line 17 "Grammar.peg"
                                                                                                                                                                                               new NotNullConstraintTypeNode{Ids=ids}
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor2;
                        }
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                }
                else
                {
                    cursor = startCursor2;
                }
            }
            if (r0 == null)
            {
                var startCursor3 = cursor;
                IParseResult<string> r10 = null;
                r10 = this.ParseLiteral(ref cursor, "FOREIGN");
                if (r10 != null)
                {
                    IParseResult<string> r11 = null;
                    r11 = this.KEY(ref cursor);
                    if (r11 != null)
                    {
                        IParseResult<IList<string>> r12 = null;
                        var localIdsStart = cursor;
                        r12 = this.idlistPar(ref cursor);
                        var localIdsEnd = cursor;
                        var localIds = ValueOrDefault(r12);
                        if (r12 != null)
                        {
                            IParseResult<string> r13 = null;
                            r13 = this.ParseLiteral(ref cursor, "REFERENCES");
                            if (r13 != null)
                            {
                                IParseResult<string> r14 = null;
                                var foreignTableStart = cursor;
                                r14 = this.Id(ref cursor);
                                var foreignTableEnd = cursor;
                                var foreignTable = ValueOrDefault(r14);
                                if (r14 != null)
                                {
                                    IParseResult<IList<string>> r15 = null;
                                    var foreignIdsStart = cursor;
                                    r15 = this.idlistPar(ref cursor);
                                    var foreignIdsEnd = cursor;
                                    var foreignIds = ValueOrDefault(r15);
                                    if (r15 != null)
                                    {
                                        r0 = this.ReturnHelper<ConstraintTypeNode>(startCursor3, ref cursor, state =>
                                            #line 17 "Grammar.peg"
                                                                                                                                                                                                                                                                                                                             new FKConstraintTypeNode{LocalIds=localIds, ForeignTable=foreignTable, ForeignIds=foreignIds}
                                            #line default
                                            );
                                    }
                                    else
                                    {
                                        cursor = startCursor3;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor3;
                                }
                            }
                            else
                            {
                                cursor = startCursor3;
                            }
                        }
                        else
                        {
                            cursor = startCursor3;
                        }
                    }
                    else
                    {
                        cursor = startCursor3;
                    }
                }
                else
                {
                    cursor = startCursor3;
                }
            }
            return r0;
        }

        private IParseResult<
            #line 18 "Grammar.peg"
           IList<string>
            #line default
            > idlistPar(ref Cursor cursor)
        {
            IParseResult<IList<string>> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "(");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                var idsStart = cursor;
                r2 = this.idlist(ref cursor);
                var idsEnd = cursor;
                var ids = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<string> r3 = null;
                    r3 = this.ParseLiteral(ref cursor, ")");
                    if (r3 != null)
                    {
                        r0 = this.ReturnHelper<IList<string>>(startCursor0, ref cursor, state =>
                            #line 18 "Grammar.peg"
                                                ids
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<IList<string>> idlist(ref Cursor cursor)
        {
            IParseResult<IList<string>> r0 = null;
            var startCursor0 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                var startCursor1 = cursor;
                if (l0.Count > 0)
                {
                    IParseResult<string> r1 = null;
                    r1 = this.comma(ref cursor);
                    if (r1 == null)
                    {
                        break;
                    }
                }
                IParseResult<string> r2 = null;
                r2 = this.Id(ref cursor);
                if (r2 != null)
                {
                    l0.Add(r2.Value);
                }
                else
                {
                    cursor = startCursor1;
                    break;
                }
            }
            if (l0.Count >= 1)
            {
                r0 = this.ReturnHelper<IList<string>>(startCursor0, ref cursor, state => l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 20 "Grammar.peg"
            SelectStatementNode
            #line default
            > selectStmt(ref Cursor cursor)
        {
            IParseResult<SelectStatementNode> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<SelectClauseNode> r1 = null;
                var selectStart = cursor;
                r1 = this.selectClause(ref cursor);
                var selectEnd = cursor;
                var select = ValueOrDefault(r1);
                if (r1 != null)
                {
                    IParseResult<IList<string>> r2 = null;
                    r2 = this.ows(ref cursor);
                    if (r2 != null)
                    {
                        IParseResult<IList<FromClauseNode>> r3 = null;
                        var fromStart = cursor;
                        var startCursor1 = cursor;
                        var l0 = new List<FromClauseNode>();
                        while (l0.Count < 1)
                        {
                            IParseResult<FromClauseNode> r4 = null;
                            r4 = this.fromClause(ref cursor);
                            if (r4 != null)
                            {
                                l0.Add(r4.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        r3 = this.ReturnHelper<IList<FromClauseNode>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                        var fromEnd = cursor;
                        var from = ValueOrDefault(r3);
                        if (r3 != null)
                        {
                            IParseResult<IList<WhereClauseNode>> r5 = null;
                            var startCursor2 = cursor;
                            var l1 = new List<WhereClauseNode>();
                            while (l1.Count < 1)
                            {
                                IParseResult<WhereClauseNode> r6 = null;
                                r6 = this.whereClause(ref cursor);
                                if (r6 != null)
                                {
                                    l1.Add(r6.Value);
                                }
                                else
                                {
                                    break;
                                }
                            }
                            r5 = this.ReturnHelper<IList<WhereClauseNode>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                            if (r5 != null)
                            {
                                IParseResult<IList<string>> r7 = null;
                                var startCursor3 = cursor;
                                var l2 = new List<string>();
                                while (l2.Count < 1)
                                {
                                    IParseResult<string> r8 = null;
                                    r8 = this.groupClause(ref cursor);
                                    if (r8 != null)
                                    {
                                        l2.Add(r8.Value);
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                                r7 = this.ReturnHelper<IList<string>>(startCursor3, ref cursor, state => l2.AsReadOnly());
                                if (r7 != null)
                                {
                                    IParseResult<IList<string>> r9 = null;
                                    var startCursor4 = cursor;
                                    var l3 = new List<string>();
                                    while (l3.Count < 1)
                                    {
                                        IParseResult<string> r10 = null;
                                        r10 = this.havingClause(ref cursor);
                                        if (r10 != null)
                                        {
                                            l3.Add(r10.Value);
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                    r9 = this.ReturnHelper<IList<string>>(startCursor4, ref cursor, state => l3.AsReadOnly());
                                    if (r9 != null)
                                    {
                                        IParseResult<IList<string>> r11 = null;
                                        var startCursor5 = cursor;
                                        var l4 = new List<string>();
                                        while (l4.Count < 1)
                                        {
                                            IParseResult<string> r12 = null;
                                            r12 = this.orderClause(ref cursor);
                                            if (r12 != null)
                                            {
                                                l4.Add(r12.Value);
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                        r11 = this.ReturnHelper<IList<string>>(startCursor5, ref cursor, state => l4.AsReadOnly());
                                        if (r11 != null)
                                        {
                                            r0 = this.ReturnHelper<SelectStatementNode>(startCursor0, ref cursor, state =>
                                                #line 21 "Grammar.peg"
  new SelectStatementNode{SelectClause=select, FromClause=from.SingleOrDefault()}
                                                #line default
                                                );
                                        }
                                        else
                                        {
                                            cursor = startCursor0;
                                        }
                                    }
                                    else
                                    {
                                        cursor = startCursor0;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor6 = cursor;
                IParseResult<FromClauseNode> r13 = null;
                var fromStart = cursor;
                r13 = this.fromClause(ref cursor);
                var fromEnd = cursor;
                var from = ValueOrDefault(r13);
                if (r13 != null)
                {
                    IParseResult<IList<WhereClauseNode>> r14 = null;
                    var startCursor7 = cursor;
                    var l5 = new List<WhereClauseNode>();
                    while (l5.Count < 1)
                    {
                        IParseResult<WhereClauseNode> r15 = null;
                        r15 = this.whereClause(ref cursor);
                        if (r15 != null)
                        {
                            l5.Add(r15.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r14 = this.ReturnHelper<IList<WhereClauseNode>>(startCursor7, ref cursor, state => l5.AsReadOnly());
                    if (r14 != null)
                    {
                        IParseResult<IList<string>> r16 = null;
                        var startCursor8 = cursor;
                        var l6 = new List<string>();
                        while (l6.Count < 1)
                        {
                            IParseResult<string> r17 = null;
                            r17 = this.groupClause(ref cursor);
                            if (r17 != null)
                            {
                                l6.Add(r17.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        r16 = this.ReturnHelper<IList<string>>(startCursor8, ref cursor, state => l6.AsReadOnly());
                        if (r16 != null)
                        {
                            IParseResult<IList<string>> r18 = null;
                            var startCursor9 = cursor;
                            var l7 = new List<string>();
                            while (l7.Count < 1)
                            {
                                IParseResult<string> r19 = null;
                                r19 = this.havingClause(ref cursor);
                                if (r19 != null)
                                {
                                    l7.Add(r19.Value);
                                }
                                else
                                {
                                    break;
                                }
                            }
                            r18 = this.ReturnHelper<IList<string>>(startCursor9, ref cursor, state => l7.AsReadOnly());
                            if (r18 != null)
                            {
                                IParseResult<IList<string>> r20 = null;
                                var startCursor10 = cursor;
                                var l8 = new List<string>();
                                while (l8.Count < 1)
                                {
                                    IParseResult<string> r21 = null;
                                    r21 = this.orderClause(ref cursor);
                                    if (r21 != null)
                                    {
                                        l8.Add(r21.Value);
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                                r20 = this.ReturnHelper<IList<string>>(startCursor10, ref cursor, state => l8.AsReadOnly());
                                if (r20 != null)
                                {
                                    IParseResult<SelectClauseNode> r22 = null;
                                    var selectStart = cursor;
                                    r22 = this.selectClause(ref cursor);
                                    var selectEnd = cursor;
                                    var select = ValueOrDefault(r22);
                                    if (r22 != null)
                                    {
                                        r0 = this.ReturnHelper<SelectStatementNode>(startCursor6, ref cursor, state =>
                                            #line 23 "Grammar.peg"
  new SelectStatementNode{SelectClause=select, FromClause=from}
                                            #line default
                                            );
                                    }
                                    else
                                    {
                                        cursor = startCursor6;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor6;
                                }
                            }
                            else
                            {
                                cursor = startCursor6;
                            }
                        }
                        else
                        {
                            cursor = startCursor6;
                        }
                    }
                    else
                    {
                        cursor = startCursor6;
                    }
                }
                else
                {
                    cursor = startCursor6;
                }
            }
            return r0;
        }

        private IParseResult<
            #line 24 "Grammar.peg"
              SelectClauseNode
            #line default
            > selectClause(ref Cursor cursor)
        {
            IParseResult<SelectClauseNode> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.SELECT(ref cursor);
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.ows(ref cursor);
                if (r2 != null)
                {
                    IParseResult<bool> r3 = null;
                    var distinctStart = cursor;
                    r3 = this.distinctOpt(ref cursor);
                    var distinctEnd = cursor;
                    var distinct = ValueOrDefault(r3);
                    if (r3 != null)
                    {
                        IParseResult<IList<string>> r4 = null;
                        r4 = this.ows(ref cursor);
                        if (r4 != null)
                        {
                            IParseResult<IColumnListNode> r5 = null;
                            var columnsStart = cursor;
                            r5 = this.selList(ref cursor);
                            var columnsEnd = cursor;
                            var columns = ValueOrDefault(r5);
                            if (r5 != null)
                            {
                                IParseResult<IList<string>> r6 = null;
                                r6 = this.ows(ref cursor);
                                if (r6 != null)
                                {
                                    IParseResult<IList<string>> r7 = null;
                                    var idStart = cursor;
                                    var startCursor1 = cursor;
                                    var l0 = new List<string>();
                                    while (l0.Count < 1)
                                    {
                                        IParseResult<string> r8 = null;
                                        var startCursor2 = cursor;
                                        IParseResult<string> r9 = null;
                                        r9 = this.INTO(ref cursor);
                                        if (r9 != null)
                                        {
                                            IParseResult<IList<string>> r10 = null;
                                            r10 = this.ows(ref cursor);
                                            if (r10 != null)
                                            {
                                                IParseResult<string> r11 = null;
                                                var tableIdStart = cursor;
                                                r11 = this.Id(ref cursor);
                                                var tableIdEnd = cursor;
                                                var tableId = ValueOrDefault(r11);
                                                if (r11 != null)
                                                {
                                                    r8 = this.ReturnHelper<string>(startCursor2, ref cursor, state =>
                                                        #line 24 "Grammar.peg"
                                                                                                                  tableId
                                                        #line default
                                                        );
                                                }
                                                else
                                                {
                                                    cursor = startCursor2;
                                                }
                                            }
                                            else
                                            {
                                                cursor = startCursor2;
                                            }
                                        }
                                        else
                                        {
                                            cursor = startCursor2;
                                        }
                                        if (r8 != null)
                                        {
                                            l0.Add(r8.Value);
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                    r7 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                                    var idEnd = cursor;
                                    var id = ValueOrDefault(r7);
                                    if (r7 != null)
                                    {
                                        r0 = this.ReturnHelper<SelectClauseNode>(startCursor0, ref cursor, state =>
                                            #line 24 "Grammar.peg"
                                                                                                                              new SelectClauseNode{Distinct=distinct, ColumnList=columns, IntoTableId=id.SingleOrDefault()}
                                            #line default
                                            );
                                    }
                                    else
                                    {
                                        cursor = startCursor0;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 25 "Grammar.peg"
             bool
            #line default
            > distinctOpt(ref Cursor cursor)
        {
            IParseResult<bool> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<bool>> r1 = null;
            var distinctStart = cursor;
            var startCursor1 = cursor;
            var l0 = new List<bool>();
            while (l0.Count < 1)
            {
                IParseResult<bool> r2 = null;
                if (r2 == null)
                {
                    var startCursor2 = cursor;
                    IParseResult<string> r3 = null;
                    r3 = this.ParseLiteral(ref cursor, "ALL");
                    if (r3 != null)
                    {
                        r2 = this.ReturnHelper<bool>(startCursor2, ref cursor, state =>
                            #line 25 "Grammar.peg"
                                           false
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                }
                if (r2 == null)
                {
                    var startCursor3 = cursor;
                    IParseResult<string> r4 = null;
                    r4 = this.ParseLiteral(ref cursor, "DISTINCT");
                    if (r4 != null)
                    {
                        r2 = this.ReturnHelper<bool>(startCursor3, ref cursor, state =>
                            #line 25 "Grammar.peg"
                                                             true
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor3;
                    }
                }
                if (r2 != null)
                {
                    l0.Add(r2.Value);
                }
                else
                {
                    break;
                }
            }
            r1 = this.ReturnHelper<IList<bool>>(startCursor1, ref cursor, state => l0.AsReadOnly());
            var distinctEnd = cursor;
            var distinct = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper<bool>(startCursor0, ref cursor, state =>
                    #line 25 "Grammar.peg"
                                                                      distinct.Any()?distinct.Single():false
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 26 "Grammar.peg"
         IColumnListNode
            #line default
            > selList(ref Cursor cursor)
        {
            IParseResult<IColumnListNode> r0 = null;
            if (r0 == null)
            {
                r0 = this.columnItemList(ref cursor);
            }
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.ParseLiteral(ref cursor, "*");
                if (r1 != null)
                {
                    r0 = this.ReturnHelper<IColumnListNode>(startCursor0, ref cursor, state =>
                        #line 26 "Grammar.peg"
                                                   new AllColumnsListNode()
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            return r0;
        }

        private IParseResult<
            #line 27 "Grammar.peg"
                ColumnNameListNode
            #line default
            > columnItemList(ref Cursor cursor)
        {
            IParseResult<ColumnNameListNode> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            var idsStart = cursor;
            var startCursor1 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                var startCursor2 = cursor;
                if (l0.Count > 0)
                {
                    IParseResult<string> r2 = null;
                    var startCursor3 = cursor;
                    IParseResult<IList<string>> r3 = null;
                    r3 = this.ows(ref cursor);
                    if (r3 != null)
                    {
                        IParseResult<string> r4 = null;
                        r4 = this.comma(ref cursor);
                        if (r4 != null)
                        {
                            IParseResult<IList<string>> r5 = null;
                            r5 = this.ows(ref cursor);
                            if (r5 != null)
                            {
                                {
                                    var len = cursor.Location - startCursor3.Location;
                                    r2 = this.ReturnHelper<string>(startCursor3, ref cursor, state =>
                                        state.Subject.Substring(startCursor3.Location, len)
                                        );
                                }
                            }
                            else
                            {
                                cursor = startCursor3;
                            }
                        }
                        else
                        {
                            cursor = startCursor3;
                        }
                    }
                    else
                    {
                        cursor = startCursor3;
                    }
                    if (r2 == null)
                    {
                        break;
                    }
                }
                IParseResult<string> r6 = null;
                r6 = this.columnItem(ref cursor);
                if (r6 != null)
                {
                    l0.Add(r6.Value);
                }
                else
                {
                    cursor = startCursor2;
                    break;
                }
            }
            if (l0.Count >= 1)
            {
                r1 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor1;
            }
            var idsEnd = cursor;
            var ids = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper<ColumnNameListNode>(startCursor0, ref cursor, state =>
                    #line 27 "Grammar.peg"
                                                                         new ColumnNameListNode{Ids= ids}
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> columnItem(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.projectionRef(ref cursor);
            }
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.columnSource(ref cursor);
                if (r1 != null)
                {
                    IParseResult<IList<string>> r2 = null;
                    var startCursor1 = cursor;
                    var l0 = new List<string>();
                    while (l0.Count < 1)
                    {
                        IParseResult<string> r3 = null;
                        var startCursor2 = cursor;
                        IParseResult<IList<string>> r4 = null;
                        var startCursor3 = cursor;
                        var l1 = new List<string>();
                        while (l1.Count < 1)
                        {
                            IParseResult<string> r5 = null;
                            r5 = this.AS(ref cursor);
                            if (r5 != null)
                            {
                                l1.Add(r5.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        r4 = this.ReturnHelper<IList<string>>(startCursor3, ref cursor, state => l1.AsReadOnly());
                        if (r4 != null)
                        {
                            IParseResult<string> r6 = null;
                            r6 = this.Id(ref cursor);
                            if (r6 != null)
                            {
                                {
                                    var len = cursor.Location - startCursor2.Location;
                                    r3 = this.ReturnHelper<string>(startCursor2, ref cursor, state =>
                                        state.Subject.Substring(startCursor2.Location, len)
                                        );
                                }
                            }
                            else
                            {
                                cursor = startCursor2;
                            }
                        }
                        else
                        {
                            cursor = startCursor2;
                        }
                        if (r3 != null)
                        {
                            l0.Add(r3.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r2 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                    if (r2 != null)
                    {
                        {
                            var len = cursor.Location - startCursor0.Location;
                            r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                state.Subject.Substring(startCursor0.Location, len)
                                );
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            return r0;
        }

        private IParseResult<string> columnSource(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.aggregate(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.Id(ref cursor);
            }
            return r0;
        }

        private IParseResult<string> aggregate(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.aggregateName(ref cursor);
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                r2 = this.ParseLiteral(ref cursor, "(");
                if (r2 != null)
                {
                    IParseResult<IExpression> r3 = null;
                    r3 = this.aggregateArg(ref cursor);
                    if (r3 != null)
                    {
                        IParseResult<string> r4 = null;
                        r4 = this.ParseLiteral(ref cursor, ")");
                        if (r4 != null)
                        {
                            {
                                var len = cursor.Location - startCursor0.Location;
                                r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                    state.Subject.Substring(startCursor0.Location, len)
                                    );
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 31 "Grammar.peg"
              IExpression
            #line default
            > aggregateArg(ref Cursor cursor)
        {
            IParseResult<IExpression> r0 = null;
            if (r0 == null)
            {
                r0 = this.expression(ref cursor);
            }
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.ParseLiteral(ref cursor, "*");
                if (r1 != null)
                {
                    r0 = this.ReturnHelper<IExpression>(startCursor0, ref cursor, state =>
                        #line 31 "Grammar.peg"
                                              new AllColumnsListNode()
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            return r0;
        }

        private IParseResult<string> aggregateName(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.COUNT(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "AVG");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "MIN");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "MAX");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "STDEV");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "STDEVP");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "SUM");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "VAR");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "VARP");
            }
            return r0;
        }

        private IParseResult<
            #line 33 "Grammar.peg"
            FromClauseNode
            #line default
            > fromClause(ref Cursor cursor)
        {
            IParseResult<FromClauseNode> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.FROM(ref cursor);
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.ows(ref cursor);
                if (r2 != null)
                {
                    IParseResult<IList<string>> r3 = null;
                    var idsStart = cursor;
                    r3 = this.idlist(ref cursor);
                    var idsEnd = cursor;
                    var ids = ValueOrDefault(r3);
                    if (r3 != null)
                    {
                        IParseResult<IList<string>> r4 = null;
                        r4 = this.ows(ref cursor);
                        if (r4 != null)
                        {
                            IParseResult<IList<string>> r5 = null;
                            var startCursor1 = cursor;
                            var l0 = new List<string>();
                            while (l0.Count < 1)
                            {
                                IParseResult<string> r6 = null;
                                r6 = this.joinChain(ref cursor);
                                if (r6 != null)
                                {
                                    l0.Add(r6.Value);
                                }
                                else
                                {
                                    break;
                                }
                            }
                            r5 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                            if (r5 != null)
                            {
                                r0 = this.ReturnHelper<FromClauseNode>(startCursor0, ref cursor, state =>
                                    #line 33 "Grammar.peg"
                                                                  new FromClauseNode{TableIds=ids}
                                    #line default
                                    );
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> joinChain(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            var startCursor1 = cursor;
            var l0 = new List<string>();
            while (l0.Count < 1)
            {
                IParseResult<string> r2 = null;
                r2 = this.joinKind(ref cursor);
                if (r2 != null)
                {
                    l0.Add(r2.Value);
                }
                else
                {
                    break;
                }
            }
            r1 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
            if (r1 != null)
            {
                IParseResult<string> r3 = null;
                r3 = this.JOIN(ref cursor);
                if (r3 != null)
                {
                    IParseResult<IList<string>> r4 = null;
                    r4 = this.idlist(ref cursor);
                    if (r4 != null)
                    {
                        IParseResult<string> r5 = null;
                        r5 = this.ON(ref cursor);
                        if (r5 != null)
                        {
                            IParseResult<string> r6 = null;
                            r6 = this.Id(ref cursor);
                            if (r6 != null)
                            {
                                IParseResult<string> r7 = null;
                                r7 = this.ParseLiteral(ref cursor, "=");
                                if (r7 != null)
                                {
                                    IParseResult<string> r8 = null;
                                    r8 = this.Id(ref cursor);
                                    if (r8 != null)
                                    {
                                        {
                                            var len = cursor.Location - startCursor0.Location;
                                            r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                                state.Subject.Substring(startCursor0.Location, len)
                                                );
                                        }
                                    }
                                    else
                                    {
                                        cursor = startCursor0;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> joinKind(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "INNER");
            }
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.ParseLiteral(ref cursor, "LEFT");
                if (r1 != null)
                {
                    IParseResult<IList<string>> r2 = null;
                    var startCursor1 = cursor;
                    var l0 = new List<string>();
                    while (l0.Count < 1)
                    {
                        IParseResult<string> r3 = null;
                        r3 = this.ParseLiteral(ref cursor, "OUTER");
                        if (r3 != null)
                        {
                            l0.Add(r3.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r2 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                    if (r2 != null)
                    {
                        {
                            var len = cursor.Location - startCursor0.Location;
                            r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                state.Subject.Substring(startCursor0.Location, len)
                                );
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor2 = cursor;
                IParseResult<string> r4 = null;
                r4 = this.ParseLiteral(ref cursor, "RIGHT");
                if (r4 != null)
                {
                    IParseResult<IList<string>> r5 = null;
                    var startCursor3 = cursor;
                    var l1 = new List<string>();
                    while (l1.Count < 1)
                    {
                        IParseResult<string> r6 = null;
                        r6 = this.ParseLiteral(ref cursor, "OUTER");
                        if (r6 != null)
                        {
                            l1.Add(r6.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r5 = this.ReturnHelper<IList<string>>(startCursor3, ref cursor, state => l1.AsReadOnly());
                    if (r5 != null)
                    {
                        {
                            var len = cursor.Location - startCursor2.Location;
                            r0 = this.ReturnHelper<string>(startCursor2, ref cursor, state =>
                                state.Subject.Substring(startCursor2.Location, len)
                                );
                        }
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                }
                else
                {
                    cursor = startCursor2;
                }
            }
            return r0;
        }

        private IParseResult<
            #line 36 "Grammar.peg"
             WhereClauseNode
            #line default
            > whereClause(ref Cursor cursor)
        {
            IParseResult<WhereClauseNode> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "WHERE");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.ows(ref cursor);
                if (r2 != null)
                {
                    IParseResult<IExpression> r3 = null;
                    var exprStart = cursor;
                    r3 = this.expression(ref cursor);
                    var exprEnd = cursor;
                    var expr = ValueOrDefault(r3);
                    if (r3 != null)
                    {
                        r0 = this.ReturnHelper<WhereClauseNode>(startCursor0, ref cursor, state =>
                            #line 36 "Grammar.peg"
                                                             new WhereClauseNode{Expression=expr}
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> groupClause(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "GROUP");
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                r2 = this.BY(ref cursor);
                if (r2 != null)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this.idlist(ref cursor);
                    if (r3 != null)
                    {
                        {
                            var len = cursor.Location - startCursor0.Location;
                            r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                state.Subject.Substring(startCursor0.Location, len)
                                );
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> havingClause(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "HAVING");
            if (r1 != null)
            {
                IParseResult<IExpression> r2 = null;
                r2 = this.expression(ref cursor);
                if (r2 != null)
                {
                    {
                        var len = cursor.Location - startCursor0.Location;
                        r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                            state.Subject.Substring(startCursor0.Location, len)
                            );
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> orderClause(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "ORDER");
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                r2 = this.BY(ref cursor);
                if (r2 != null)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this.orderList(ref cursor);
                    if (r3 != null)
                    {
                        {
                            var len = cursor.Location - startCursor0.Location;
                            r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                state.Subject.Substring(startCursor0.Location, len)
                                );
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> projectionRef(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.ParseLiteral(ref cursor, "<");
                if (r1 != null)
                {
                    IParseResult<string> r2 = null;
                    r2 = this.Id_simple(ref cursor);
                    if (r2 != null)
                    {
                        IParseResult<string> r3 = null;
                        r3 = this.ParseLiteral(ref cursor, ">");
                        if (r3 != null)
                        {
                            {
                                var len = cursor.Location - startCursor0.Location;
                                r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                    state.Subject.Substring(startCursor0.Location, len)
                                    );
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<string> r4 = null;
                r4 = this.Id_simple(ref cursor);
                if (r4 != null)
                {
                    IParseResult<string> r5 = null;
                    r5 = this.dot(ref cursor);
                    if (r5 != null)
                    {
                        IParseResult<string> r6 = null;
                        r6 = this.ParseLiteral(ref cursor, "<");
                        if (r6 != null)
                        {
                            IParseResult<string> r7 = null;
                            r7 = this.Id_simple(ref cursor);
                            if (r7 != null)
                            {
                                IParseResult<string> r8 = null;
                                r8 = this.ParseLiteral(ref cursor, ">");
                                if (r8 != null)
                                {
                                    {
                                        var len = cursor.Location - startCursor1.Location;
                                        r0 = this.ReturnHelper<string>(startCursor1, ref cursor, state =>
                                            state.Subject.Substring(startCursor1.Location, len)
                                            );
                                    }
                                }
                                else
                                {
                                    cursor = startCursor1;
                                }
                            }
                            else
                            {
                                cursor = startCursor1;
                            }
                        }
                        else
                        {
                            cursor = startCursor1;
                        }
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            return r0;
        }

        private IParseResult<IList<string>> orderList(ref Cursor cursor)
        {
            IParseResult<IList<string>> r0 = null;
            var startCursor0 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                var startCursor1 = cursor;
                if (l0.Count > 0)
                {
                    IParseResult<string> r1 = null;
                    r1 = this.comma(ref cursor);
                    if (r1 == null)
                    {
                        break;
                    }
                }
                IParseResult<string> r2 = null;
                r2 = this.orderMember(ref cursor);
                if (r2 != null)
                {
                    l0.Add(r2.Value);
                }
                else
                {
                    cursor = startCursor1;
                    break;
                }
            }
            if (l0.Count >= 1)
            {
                r0 = this.ReturnHelper<IList<string>>(startCursor0, ref cursor, state => l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> orderMember(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.Id(ref cursor);
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<string>();
                while (l0.Count < 1)
                {
                    IParseResult<string> r3 = null;
                    if (r3 == null)
                    {
                        r3 = this.ParseLiteral(ref cursor, "ASC");
                    }
                    if (r3 == null)
                    {
                        r3 = this.ParseLiteral(ref cursor, "DESC");
                    }
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r2 != null)
                {
                    {
                        var len = cursor.Location - startCursor0.Location;
                        r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                            state.Subject.Substring(startCursor0.Location, len)
                            );
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 43 "Grammar.peg"
          ITableExpression
            #line default
            > exprList(ref Cursor cursor)
        {
            IParseResult<ITableExpression> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<IExpression>> r1 = null;
            var startCursor1 = cursor;
            var l0 = new List<IExpression>();
            while (true)
            {
                var startCursor2 = cursor;
                if (l0.Count > 0)
                {
                    IParseResult<string> r2 = null;
                    r2 = this.comma(ref cursor);
                    if (r2 == null)
                    {
                        break;
                    }
                }
                IParseResult<IExpression> r3 = null;
                r3 = this.expression(ref cursor);
                if (r3 != null)
                {
                    l0.Add(r3.Value);
                }
                else
                {
                    cursor = startCursor2;
                    break;
                }
            }
            if (l0.Count >= 1)
            {
                r1 = this.ReturnHelper<IList<IExpression>>(startCursor1, ref cursor, state => l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor1;
            }
            if (r1 != null)
            {
                r0 = this.ReturnHelper<ITableExpression>(startCursor0, ref cursor, state =>
                    #line 43 "Grammar.peg"
                                                    new ExpressionList()
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 44 "Grammar.peg"
            IExpression
            #line default
            > expression(ref Cursor cursor)
        {
            IParseResult<IExpression> r0 = null;
            var storageKey = "expression:" + cursor.StateKey + ":" + cursor.Location;
            if (this.storage.ContainsKey(storageKey))
            {
                r0 = (IParseResult<IExpression>)this.storage[storageKey];
                if (r0 != null)
                {
                    cursor = r0.EndCursor;
                }
                return r0;
            }
            r0 = this.term(ref cursor);
            this.storage[storageKey] = r0;
            return r0;
        }

        private IParseResult<
            #line 45 "Grammar.peg"
      IExpression
            #line default
            > term(ref Cursor cursor)
        {
            IParseResult<IExpression> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                var idStart = cursor;
                r1 = this.Id(ref cursor);
                var idEnd = cursor;
                var id = ValueOrDefault(r1);
                if (r1 != null)
                {
                    r0 = this.ReturnHelper<IExpression>(startCursor0, ref cursor, state =>
                        #line 45 "Grammar.peg"
                            new IdExpression{Id=id}
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<string> r2 = null;
                var stringLiteralStart = cursor;
                r2 = this.string_literal(ref cursor);
                var stringLiteralEnd = cursor;
                var stringLiteral = ValueOrDefault(r2);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<IExpression>(startCursor1, ref cursor, state =>
                        #line 45 "Grammar.peg"
                                                                                    new StringLiteralExpression{Literal=stringLiteral}
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            if (r0 == null)
            {
                var startCursor2 = cursor;
                IParseResult<decimal> r3 = null;
                var numStart = cursor;
                r3 = this.number(ref cursor);
                var numEnd = cursor;
                var num = ValueOrDefault(r3);
                if (r3 != null)
                {
                    r0 = this.ReturnHelper<IExpression>(startCursor2, ref cursor, state =>
                        #line 45 "Grammar.peg"
                                                                                                                                                     new NumberLiteralExpression{Literal=num}
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor2;
                }
            }
            return r0;
        }

        private IParseResult<string> tuple(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "(");
            if (r1 != null)
            {
                IParseResult<ITableExpression> r2 = null;
                r2 = this.exprList(ref cursor);
                if (r2 != null)
                {
                    IParseResult<string> r3 = null;
                    r3 = this.ParseLiteral(ref cursor, ")");
                    if (r3 != null)
                    {
                        {
                            var len = cursor.Location - startCursor0.Location;
                            r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                state.Subject.Substring(startCursor0.Location, len)
                                );
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> parSelectStmt(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "(");
            if (r1 != null)
            {
                IParseResult<SelectStatementNode> r2 = null;
                r2 = this.selectStmt(ref cursor);
                if (r2 != null)
                {
                    IParseResult<string> r3 = null;
                    r3 = this.ParseLiteral(ref cursor, ")");
                    if (r3 != null)
                    {
                        {
                            var len = cursor.Location - startCursor0.Location;
                            r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                state.Subject.Substring(startCursor0.Location, len)
                                );
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> unExpr(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.unOp(ref cursor);
            if (r1 != null)
            {
                IParseResult<IExpression> r2 = null;
                r2 = this.term(ref cursor);
                if (r2 != null)
                {
                    {
                        var len = cursor.Location - startCursor0.Location;
                        r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                            state.Subject.Substring(startCursor0.Location, len)
                            );
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> unOp(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.NOT(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "+");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "-");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "~");
            }
            return r0;
        }

        private IParseResult<string> binExpr(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var storageKey = "binExpr:" + cursor.StateKey + ":" + cursor.Location;
            if (this.storage.ContainsKey(storageKey))
            {
                r0 = (IParseResult<string>)this.storage[storageKey];
                if (r0 != null)
                {
                    cursor = r0.EndCursor;
                }
                return r0;
            }
            var startCursor0 = cursor;
            IParseResult<IExpression> r1 = null;
            r1 = this.expression(ref cursor);
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                r2 = this.binOp(ref cursor);
                if (r2 != null)
                {
                    IParseResult<IExpression> r3 = null;
                    r3 = this.expression(ref cursor);
                    if (r3 != null)
                    {
                        {
                            var len = cursor.Location - startCursor0.Location;
                            r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                state.Subject.Substring(startCursor0.Location, len)
                                );
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            this.storage[storageKey] = r0;
            return r0;
        }

        private IParseResult<string> binOp(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "+");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "-");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "*");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "/");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "%");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "&");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "|");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "^");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "=");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, ">");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "<");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, ">=");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "<>");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "!=");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "!<");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "!>");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "AND");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "OR");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "LIKE");
            }
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.NOT(ref cursor);
                if (r1 != null)
                {
                    IParseResult<string> r2 = null;
                    r2 = this.ParseLiteral(ref cursor, "LIKE");
                    if (r2 != null)
                    {
                        {
                            var len = cursor.Location - startCursor0.Location;
                            r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                state.Subject.Substring(startCursor0.Location, len)
                                );
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "IN");
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<string> r3 = null;
                r3 = this.NOT(ref cursor);
                if (r3 != null)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.ParseLiteral(ref cursor, "IN");
                    if (r4 != null)
                    {
                        {
                            var len = cursor.Location - startCursor1.Location;
                            r0 = this.ReturnHelper<string>(startCursor1, ref cursor, state =>
                                state.Subject.Substring(startCursor1.Location, len)
                                );
                        }
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            return r0;
        }

        private IParseResult<string> betweenExpr(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IExpression> r1 = null;
            r1 = this.expression(ref cursor);
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<string>();
                while (l0.Count < 1)
                {
                    IParseResult<string> r3 = null;
                    r3 = this.NOT(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r2 != null)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.ParseLiteral(ref cursor, "BETWEEN");
                    if (r4 != null)
                    {
                        IParseResult<IExpression> r5 = null;
                        r5 = this.expression(ref cursor);
                        if (r5 != null)
                        {
                            IParseResult<string> r6 = null;
                            r6 = this.ParseLiteral(ref cursor, "AND");
                            if (r6 != null)
                            {
                                IParseResult<IExpression> r7 = null;
                                r7 = this.expression(ref cursor);
                                if (r7 != null)
                                {
                                    {
                                        var len = cursor.Location - startCursor0.Location;
                                        r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                            state.Subject.Substring(startCursor0.Location, len)
                                            );
                                    }
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> funCall(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.Id(ref cursor);
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                r2 = this.ParseLiteral(ref cursor, "(");
                if (r2 != null)
                {
                    IParseResult<IExpression> r3 = null;
                    r3 = this.funArgs(ref cursor);
                    if (r3 != null)
                    {
                        IParseResult<string> r4 = null;
                        r4 = this.ParseLiteral(ref cursor, ")");
                        if (r4 != null)
                        {
                            {
                                var len = cursor.Location - startCursor0.Location;
                                r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                    state.Subject.Substring(startCursor0.Location, len)
                                    );
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 55 "Grammar.peg"
         IExpression
            #line default
            > funArgs(ref Cursor cursor)
        {
            IParseResult<IExpression> r0 = null;
            if (r0 == null)
            {
                r0 = this.selectStmt(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.exprList(ref cursor);
            }
            return r0;
        }

        private IParseResult<string> inStmt(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IExpression> r1 = null;
            r1 = this.expression(ref cursor);
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                r2 = this.ParseLiteral(ref cursor, "IN");
                if (r2 != null)
                {
                    IParseResult<string> r3 = null;
                    r3 = this.ParseLiteral(ref cursor, "(");
                    if (r3 != null)
                    {
                        IParseResult<ITableExpression> r4 = null;
                        r4 = this.exprList(ref cursor);
                        if (r4 != null)
                        {
                            IParseResult<string> r5 = null;
                            r5 = this.ParseLiteral(ref cursor, ")");
                            if (r5 != null)
                            {
                                {
                                    var len = cursor.Location - startCursor0.Location;
                                    r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                        state.Subject.Substring(startCursor0.Location, len)
                                        );
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> dot(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, ".");
            return r0;
        }

        private IParseResult<string> comma(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, ",");
            return r0;
        }

        private IParseResult<
            #line 63 "Grammar.peg"
           string
            #line default
            > Id_simple(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<
                    #line 63 "Grammar.peg"
                       string
                    #line default
                    > r1 = null;
                var startCursor1 = cursor;
                {
                    var len = cursor.Location - startCursor1.Location;
                    r1 = this.ReturnHelper<string>(startCursor1, ref cursor, state =>
                        state.Subject.Substring(startCursor1.Location, len)
                        );
                }
                if (r1 != null)
                {
                    IParseResult<IList<string>> r2 = null;
                    var startCursor2 = cursor;
                    var l0 = new List<string>();
                    while (true)
                    {
                        IParseResult<string> r3 = null;
                        r3 = this.ParseClass(ref cursor, "AZ__");
                        if (r3 != null)
                        {
                            l0.Add(r3.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (l0.Count >= 1)
                    {
                        r2 = this.ReturnHelper<IList<string>>(startCursor2, ref cursor, state => l0.AsReadOnly());
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                    if (r2 != null)
                    {
                        {
                            var len = cursor.Location - startCursor0.Location;
                            r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                state.Subject.Substring(startCursor0.Location, len)
                                );
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor3 = cursor;
                IParseResult<string> r4 = null;
                r4 = this.ParseLiteral(ref cursor, "[");
                if (r4 != null)
                {
                    IParseResult<IList<string>> r5 = null;
                    var startCursor4 = cursor;
                    var l1 = new List<string>();
                    while (true)
                    {
                        IParseResult<string> r6 = null;
                        r6 = this.ParseClass(ref cursor, "AZ__");
                        if (r6 != null)
                        {
                            l1.Add(r6.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r5 = this.ReturnHelper<IList<string>>(startCursor4, ref cursor, state => l1.AsReadOnly());
                    if (r5 != null)
                    {
                        IParseResult<string> r7 = null;
                        r7 = this.ParseLiteral(ref cursor, "]");
                        if (r7 != null)
                        {
                            {
                                var len = cursor.Location - startCursor3.Location;
                                r0 = this.ReturnHelper<string>(startCursor3, ref cursor, state =>
                                    state.Subject.Substring(startCursor3.Location, len)
                                    );
                            }
                        }
                        else
                        {
                            cursor = startCursor3;
                        }
                    }
                    else
                    {
                        cursor = startCursor3;
                    }
                }
                else
                {
                    cursor = startCursor3;
                }
            }
            if (r0 == null)
            {
                var startCursor5 = cursor;
                IParseResult<string> r8 = null;
                r8 = this.ParseClass(ref cursor, "\"\"");
                if (r8 != null)
                {
                    IParseResult<IList<string>> r9 = null;
                    var startCursor6 = cursor;
                    var l2 = new List<string>();
                    while (true)
                    {
                        IParseResult<string> r10 = null;
                        r10 = this.ParseClass(ref cursor, "AZ__");
                        if (r10 != null)
                        {
                            l2.Add(r10.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r9 = this.ReturnHelper<IList<string>>(startCursor6, ref cursor, state => l2.AsReadOnly());
                    if (r9 != null)
                    {
                        IParseResult<string> r11 = null;
                        r11 = this.ParseClass(ref cursor, "\"\"");
                        if (r11 != null)
                        {
                            {
                                var len = cursor.Location - startCursor5.Location;
                                r0 = this.ReturnHelper<string>(startCursor5, ref cursor, state =>
                                    state.Subject.Substring(startCursor5.Location, len)
                                    );
                            }
                        }
                        else
                        {
                            cursor = startCursor5;
                        }
                    }
                    else
                    {
                        cursor = startCursor5;
                    }
                }
                else
                {
                    cursor = startCursor5;
                }
            }
            return r0;
        }

        private IParseResult<
            #line 64 "Grammar.peg"
        decimal
            #line default
            > number(ref Cursor cursor)
        {
            IParseResult<decimal> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var valueStart = cursor;
            var startCursor1 = cursor;
            IParseResult<IList<string>> r2 = null;
            var startCursor2 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r3 = null;
                r3 = this.ParseClass(ref cursor, "09");
                if (r3 != null)
                {
                    l0.Add(r3.Value);
                }
                else
                {
                    break;
                }
            }
            if (l0.Count >= 1)
            {
                r2 = this.ReturnHelper<IList<string>>(startCursor2, ref cursor, state => l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor2;
            }
            if (r2 != null)
            {
                IParseResult<IList<string>> r4 = null;
                var startCursor3 = cursor;
                var l1 = new List<string>();
                while (l1.Count < 1)
                {
                    IParseResult<string> r5 = null;
                    r5 = this.ParseLiteral(ref cursor, ".");
                    if (r5 != null)
                    {
                        l1.Add(r5.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r4 = this.ReturnHelper<IList<string>>(startCursor3, ref cursor, state => l1.AsReadOnly());
                if (r4 != null)
                {
                    IParseResult<IList<string>> r6 = null;
                    var startCursor4 = cursor;
                    var l2 = new List<string>();
                    while (true)
                    {
                        IParseResult<string> r7 = null;
                        r7 = this.ParseClass(ref cursor, "09");
                        if (r7 != null)
                        {
                            l2.Add(r7.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r6 = this.ReturnHelper<IList<string>>(startCursor4, ref cursor, state => l2.AsReadOnly());
                    if (r6 != null)
                    {
                        {
                            var len = cursor.Location - startCursor1.Location;
                            r1 = this.ReturnHelper<string>(startCursor1, ref cursor, state =>
                                state.Subject.Substring(startCursor1.Location, len)
                                );
                        }
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            var valueEnd = cursor;
            var value = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper<decimal>(startCursor0, ref cursor, state =>
                    #line 64 "Grammar.peg"
                                               decimal.Parse(value)
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> string_literal(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "\'");
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                if (r2 == null)
                {
                    r2 = this.ParseClass(ref cursor, "\'\'", negated: true);
                }
                if (r2 == null)
                {
                    r2 = this.ParseLiteral(ref cursor, "");
                }
                if (r2 != null)
                {
                    IParseResult<string> r3 = null;
                    r3 = this.ParseLiteral(ref cursor, "\'");
                    if (r3 != null)
                    {
                        {
                            var len = cursor.Location - startCursor0.Location;
                            r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                state.Subject.Substring(startCursor0.Location, len)
                                );
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> ws(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseClass(ref cursor, "  \t\t\n\n\r\r");
            return r0;
        }

        private IParseResult<IList<string>> ows(ref Cursor cursor)
        {
            IParseResult<IList<string>> r0 = null;
            var startCursor0 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r1 = null;
                r1 = this.ws(ref cursor);
                if (r1 != null)
                {
                    l0.Add(r1.Value);
                }
                else
                {
                    break;
                }
            }
            r0 = this.ReturnHelper<IList<string>>(startCursor0, ref cursor, state => l0.AsReadOnly());
            return r0;
        }

        private IParseResult<string> CREATE(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "CREATE");
            return r0;
        }

        private IParseResult<string> TABLE(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "TABLE");
            return r0;
        }

        private IParseResult<string> NULL(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "NULL");
            return r0;
        }

        private IParseResult<string> NOT(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "NOT");
            return r0;
        }

        private IParseResult<string> CONSTRAINT(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "CONSTRAINT");
            return r0;
        }

        private IParseResult<string> PRIMARY(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "PRIMARY");
            return r0;
        }

        private IParseResult<string> KEY(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "KEY");
            return r0;
        }

        private IParseResult<string> UNIQUE(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "UNIQUE");
            return r0;
        }

        private IParseResult<string> INDEX(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "INDEX");
            return r0;
        }

        private IParseResult<string> ON(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "ON");
            return r0;
        }

        private IParseResult<string> WITH(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "WITH");
            return r0;
        }

        private IParseResult<string> ALTER(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "ALTER");
            return r0;
        }

        private IParseResult<string> ADD(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "ADD");
            return r0;
        }

        private IParseResult<string> COLUMN(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "COLUMN");
            return r0;
        }

        private IParseResult<string> DROP(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "DROP");
            return r0;
        }

        private IParseResult<string> INSERT(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "INSERT");
            return r0;
        }

        private IParseResult<string> INTO(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "INTO");
            return r0;
        }

        private IParseResult<string> VALUES(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "VALUES");
            return r0;
        }

        private IParseResult<string> UPDATE(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "UPDATE");
            return r0;
        }

        private IParseResult<string> SET(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "SET");
            return r0;
        }

        private IParseResult<string> DELETE(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "DELETE");
            return r0;
        }

        private IParseResult<string> FROM(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "FROM");
            return r0;
        }

        private IParseResult<string> SELECT(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "SELECT");
            return r0;
        }

        private IParseResult<string> AS(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "AS");
            return r0;
        }

        private IParseResult<string> COUNT(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "COUNT");
            return r0;
        }

        private IParseResult<string> JOIN(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "JOIN");
            return r0;
        }

        private IParseResult<string> BY(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "BY");
            return r0;
        }

        private IParseResult<string> PROJECTION(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "PROJECTION");
            return r0;
        }

        private IParseResult<string> ParseLiteral(ref Cursor cursor, string literal, bool ignoreCase = false)
        {
            if (cursor.Location + literal.Length <= cursor.Subject.Length)
            {
                var substr = cursor.Subject.Substring(cursor.Location, literal.Length);
                if (ignoreCase ? substr.Equals(literal, StringComparison.OrdinalIgnoreCase) : substr == literal)
                {
                    var endCursor = cursor.Advance(substr.Length);
                    var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr);
                    cursor = endCursor;
                    return result;
                }
            }
            return null;
        }

        private IParseResult<string> ParseClass(ref Cursor cursor, string characterRanges, bool negated = false, bool ignoreCase = false)
        {
            if (cursor.Location + 1 <= cursor.Subject.Length)
            {
                var c = cursor.Subject[cursor.Location];
                bool match = false;
                for (int i = 0; !match && i < characterRanges.Length; i += 2)
                {
                    match = c >= characterRanges[i] && c <= characterRanges[i + 1];
                }
                if (!match && ignoreCase && (char.IsUpper(c) || char.IsLower(c)))
                {
                    var cs = c.ToString();
                    for (int i = 0; !match && i < characterRanges.Length; i += 2)
                    {
                        var min = characterRanges[i];
                        var max = characterRanges[i + 1];
                        for (char o = min; !match && o <= max; o++)
                        {
                            match = (char.IsUpper(o) || char.IsLower(o)) && cs.Equals(o.ToString(), StringComparison.CurrentCultureIgnoreCase);
                        }
                    }
                }
                if (match ^ negated)
                {
                    var endCursor = cursor.Advance(1);
                    var substr = cursor.Subject.Substring(cursor.Location, 1);
                    var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr);
                    cursor = endCursor;
                    return result;
                }
            }
            return null;
        }

        private IParseResult<string> ParseAny(ref Cursor cursor)
        {
            if (cursor.Location + 1 <= cursor.Subject.Length)
            {
                var substr = cursor.Subject.Substring(cursor.Location, 1);
                var endCursor = cursor.Advance(1);
                var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr);
                cursor = endCursor;
                return result;
            }
            return null;
        }

        private IParseResult<T> ReturnHelper<T>(Cursor startCursor, ref Cursor endCursor, Func<Cursor, T> wrappedCode)
        {
            var result = wrappedCode(endCursor);
            var lexical = result as ILexical;
            if (lexical != null && lexical.StartCursor == null && lexical.EndCursor == null)
            {
                lexical.StartCursor = startCursor;
                lexical.EndCursor = endCursor;
            }
            return new ParseResult<T>(startCursor, endCursor, result);
        }

        private Exception ExceptionHelper(Cursor cursor, Func<Cursor, string> wrappedCode)
        {
            var ex = new FormatException(wrappedCode(cursor));
            ex.Data["cursor"] = cursor;
            return ex;
        }

        private T ValueOrDefault<T>(IParseResult<T> result)
        {
            return result == null
                ? default(T)
                : result.Value;
        }
    }
}
