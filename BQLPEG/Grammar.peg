@namespace BQLPEG
@using BQLPEG.Nodes
@using System.Linq
Root = stmtList
stmtLine <StatementNode> = stmt:stmt ";"? {stmt}
stmtList <IEnumerable<StatementNode>> = stmtLine+
Id <string> = id:Id_simple<1,,dot> { string.Concat(id)}
stmt <StatementNode> = createTableStmt / createIndexStmt / alterStmt / dropTableStmt / dropIndexStmt / selectStmt / insertStmt / updateStmt / deleteStmt / projectionDecl / "GO"
createTableStmt <CreateTableNode> = CREATE TABLE id:Id "(" fields:fieldDefList ")" constraints:constraintListOpt {new CreateTableNode{Name=id, Fields=fields, Constraints=constraints}}
fieldDefList = fieldDef<1,,comma>
fieldDef <FieldNode> = id:Id type:typeName typeParams:typeParams? null:nullOpt {new FieldNode{Name=id, Type=type, TypeParams=typeParams.SingleOrDefault(), Nullable=null??true}}
typeName = "BIT" / "DATE" / "TIME" / "TIMESTAMP" / "DECIMAL" / "REAL" / "FLOAT" / "SMALLINT" / "INTEGER" / "INTERVAL" / "CHARACTER" / "DATETIME" / "INT" / "DOUBLE" / "CHAR" / "NCHAR" / "VARCHAR" / "NVARCHAR" / "IMAGE" / "TEXT" / "NTEXT"
typeParams <IEnumerable<int>> = "(" num:number ")" { new int[]{int.Parse(num)}}/ "(" num1:number comma num2:number ")" {new int[]{int.Parse(num1),int.Parse(num2)}}
nullOpt <bool> = (NULL {true}/ NOT NULL{false})?
constraintDef <ConstraintNode> = CONSTRAINT id:Id constraintType:constraintTypeOpt {new ConstraintNode{ Name=id, ConstraintType=constraintType}}
constraintListOpt = constraintDef*
constraintTypeOpt <ConstraintTypeNode> = PRIMARY KEY ids:idlistPar {new PKConstraintTypeNode{Ids=ids}}/ UNIQUE idlistPar / NOT NULL idlistPar / "FOREIGN" KEY idlistPar "REFERENCES" Id idlistPar
idlistPar <IList<string>> = "(" ids:idlist ")" {ids}
idlist = Id<1,,comma>
createIndexStmt = CREATE UNIQUE? INDEX Id ON Id orderList withClause?
orderList = orderMember<1,,comma>
orderMember = Id ("ASC"/"DESC")?
withClause = WITH PRIMARY / WITH "DISALLOW" NULL / WITH "IGNORE" NULL
alterStmt = ALTER TABLE Id alterCmd
alterCmd = ADD COLUMN fieldDefList constraintListOpt / ADD constraintDef / DROP COLUMN Id / DROP CONSTRAINT Id
dropTableStmt = DROP TABLE Id
dropIndexStmt = DROP INDEX Id ON Id
insertStmt = INSERT INTO? Id idlistPar insertData
insertData = selectStmt / VALUES "(" exprList ")"
updateStmt = UPDATE Id SET assignList whereClause?
assignList = assignment<1,,comma>
assignment = Id "=" expression
deleteStmt = DELETE FROM Id whereClause?
selectStmt = selectClause fromClause? whereClause? groupClause? havingClause? orderClause? / fromClause whereClause? groupClause?  havingClause? orderClause? selectClause
selectClause = SELECT ("ALL"/"DISTINCT")? selList (INTO Id)?
selList = columnItemList / "*"
columnItemList = columnItem<1,,comma>
columnItem = projectionRef / columnSource (AS? Id)?
columnSource = aggregate / Id
aggregate = aggregateName "(" aggregateArg ")"
aggregateArg = expression / "*"
aggregateName = COUNT / "AVG" / "MIN" / "MAX" / "STDEV" / "STDEVP" / "SUM" / "VAR" / "VARP"
fromClause = FROM idlist joinChain?
joinChain = joinKind? JOIN idlist ON Id "=" Id
joinKind = "INNER" / "LEFT" "OUTER"? / "RIGHT" "OUTER"?
whereClause = "WHERE" expression
groupClause = "GROUP" BY idlist
havingClause = "HAVING" expression
orderClause = "ORDER" BY orderList
projectionDecl = PROJECTION Id_simple "(" selList ")"
projectionRef = "<" Id_simple ">" / Id_simple dot "<" Id_simple ">"
exprList = expression<1,,comma>
expression -memoize = term / unExpr / binExpr // | betweenExpr // BETWEEN doesn't work - yet; 
term = Id / string_literal / number / funCall / tuple / parSelectStmt
tuple = "(" exprList ")"
parSelectStmt = "(" selectStmt ")"
unExpr = unOp term
unOp = NOT / "+" / "-" / "~"
binExpr -memoize = expression binOp expression
binOp = "+" / "-" / "*" / "/" / "%" / "&" / "|" / "^" / "=" / ">" / "<" / ">=" / "<>" / "!=" / "!<" / "!>" / "AND" / "OR" / "LIKE" / NOT "LIKE" / "IN" / NOT "IN"
betweenExpr = expression NOT? "BETWEEN" expression "AND" expression
// funCall covers some psedo-operators and special forms like ANY(...), SOME(...), ALL(...), EXISTS(...), IN(...)
funCall = Id "(" funArgs ")"
funArgs = selectStmt / exprList
inStmt = expression "IN" "(" exprList ")"


//Terminals
dot = "."
comma = ","
Id_simple <string> = [A-Z]+ / "[" [A-Z]* "]" / ["] [A-Z]* ["]
number = [0-9]+ "."? [0-9]*
string_literal = "'" ([^'] / '') "'"

//Keywords
CREATE = "CREATE"
TABLE = "TABLE"
NULL = "NULL"
NOT = "NOT"
CONSTRAINT = "CONSTRAINT"
PRIMARY = "PRIMARY"
KEY = "KEY"
UNIQUE = "UNIQUE"
INDEX = "INDEX"
ON = "ON"
WITH = "WITH"
ALTER = "ALTER"
ADD = "ADD"
COLUMN = "COLUMN"
DROP = "DROP"
INSERT = "INSERT"
INTO = "INTO"
VALUES = "VALUES"
UPDATE = "UPDATE"
SET = "SET"
DELETE = "DELETE"
FROM = "FROM"
SELECT = "SELECT"
AS = "AS"
COUNT = "COUNT"
JOIN = "JOIN"
BY = "BY"
PROJECTION = "PROJECTION"